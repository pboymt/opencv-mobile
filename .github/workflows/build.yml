name: build

on:
  push:
    branches:
      - master

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: get-version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/heads\//}

  windows:
    runs-on: windows-latest
    env:
      OPENCV_VERSION: 4.6.0
      PACKAGENAME: opencv-mobile-4.6.0-windows-vs2022
    steps:
      - uses: actions/checkout@v2
      - name: opencv-source
        run: |
          ls C:\msys64
          ls C:\msys64\usr
          ls C:\msys64\usr\bin
          Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/refs/tags/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
          7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
          cd opencv-${{ env.OPENCV_VERSION }}
          Clear-Content "cmake\OpenCVFindLibsGrfmt.cmake"
          Remove-Item "modules\gapi" -Recurse
          C:\msys64\usr\bin\patch.exe -p1 -i ..\opencv-4.5.4-no-zlib.patch
          Remove-Item "modules\highgui" -Recurse
          Copy-Item -Recurse -Path "..\highgui" -Destination "modules\"
      - name: build-x86
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build-x86; cd build-x86
          cmake -T v142,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
          cmake --build . --config Release -j 2
          cmake --build . --config Release --target install
      - name: build-x64
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build-x64; cd build-x64
          cmake -T v142,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release $(type ../../opencv4_cmake_options.txt) -DBUILD_opencv_world=OFF ..
          cmake --build . --config Release -j 2
          cmake --build . --config Release --target install
      - name: package
        run: |
          mkdir ${{ env.PACKAGENAME }}
          mkdir ${{ env.PACKAGENAME }}/x86
          mkdir ${{ env.PACKAGENAME }}/x64
          Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
          Copy-Item -Verbose -Recurse -Path "opencv-${{ env.OPENCV_VERSION }}\build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
          Remove-Item "${{ env.PACKAGENAME }}\x86\etc" -Recurse
          Remove-Item "${{ env.PACKAGENAME }}\x64\etc" -Recurse
          7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
      - name: upload-zip
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip
  release:
    needs: [setup, windows]
    runs-on: ubuntu-latest
    steps:
      - name: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: create-release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ needs.setup.outputs.VERSION }}
          name: Devlopment Build
          draft: false
          prerelease: true
          files: |
            artifacts/opencv-mobile-4.6.0-windows-vs2022/opencv-mobile-4.6.0-windows-vs2022.zip
      # - name: upload-windows-vs2022-opencv4
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PACKAGENAME: opencv-mobile-4.6.0-windows-vs2022
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
      #     asset_name: ${{ env.PACKAGENAME }}.zip
      #     asset_content_type: application/zip
